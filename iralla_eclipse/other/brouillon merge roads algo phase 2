TOGO: add infos si point sur une busline ne fait parti d aucun des 2 segments


for each busline{
	find all the vertexAndInter
	currentSimpleRoute = a simplePieceRoute with the first vertex as pt1
	beginingGroupe = list of vertexAndInter related to the first vertex
	beginningBusLinesList = list of bus lines in beginning group
	previousBusLinesList = list of busline from beginingGroupe
	prevousGroupe = beginningGroupe
	newPieceRouteCreated = true
	
	for each vertexAndInter following do{
	
		currentBusLinesList = list of all buslines of the vertexAndInters related to the current vertex
		currentBusLinesListAble = whichBusLinesAreAbleBetweenThese2vertexAndInter(
					previousBusLinesList
					currentBusLinesList,
					previous vertexAndInter,
					current vertexAndInter,
					current busLine
					);
		
		if (newPieceRouteCreated == true){
			newPieceRouteCreated = false
			
			//if (currentBusLinesList inclus ds beginn
			ingBusLinesList){
			if (currentBusLinesListAble inclus ds beginningBusLinesList){
				busLinesListToHave = currentBusLinesListAble;
			}
			else{
				currentSimpleRoute.pt2 = current vertexAndInter
				currentSimpleRoute.busLineList = currentBusLinesListAble
				save it
				create a new one:
				currentSimpleRoute.pt1 = current vertexAndInter
				newPieceRouteCreated = true
				beginningBusLinesList = currentBusLinesList
			}
		}
		else{
			whichBusLinesAreAbleBetweenThese2vertexAndInter(
			
			if(currentBusLinesListAble == busLinesListToHave){
				continue;
			}
			else if (busLinesListToHave include in currentBusLinesListAble){
			
				currentSimpleRoute.pt2 = currentVertexAndInter
				currentSimpleRoute.busLineList = busLinesListToHave
				save it
				create a new one:
				currentSimpleRoute.pt1 = currentVertexAndInter
				newPieceRouteCreated = true
				beginningBusLinesList = currentBusLinesList
			}
			else{
				//if faut creer le currentSimpleRoute.pt1 a partir du precedent vertexAndInter
				currentSimpleRoute.pt2 = previous vertexAndInter
				currentSimpleRoute.busLineList = busLinesListToHave
				save it
				create a new one:
				currentSimpleRoute.pt1 = previousVertexAndInter
				newPieceRouteCreated = true
				beginningBusLinesList = previousBusLinesList
				
				i-- 
			}
		}
		//attention: take them depending on i
		previousVertexAndInter = current vertexAndInter
		previousBusLinesList = currentBusLinesList
		previousBusLinesListAble = currentBusLinesListAble
	}
}





function whichBusLinesAreAbleBetweenThese2vertexAndInter(previousBusLinesList, currentBusLine, vertexAndInter1, vertexAndInter2, busLinesList){
	busLinesListAble = [];
	for each busline in currentBusLine{
		If ( (busline include in previousBusLinesList) 
		&& (there is not a vertex between vertexAndInter1 and vertexAndInter2)){
			busLinesListAble[] = current busLine
		}
	}
}



